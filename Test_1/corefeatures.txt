Core Features Implemented:

Location Detection (location_service.py)

Automatic IP-based geolocation
Multiple fallback services
Timezone detection
Location enrichment


Web Scraping Orchestrator (scraper_orchestrator.py)

Integrates multiple search engines (Google, DuckDuckGo, Bing)
Social media profile detection
Asynchronous scraping with timeout management
Extensible architecture for adding tools like Sherlock, Photon, theHarvester


Data Processing (data_processor.py)

Advanced NLP-based interest extraction
Named entity recognition
Sentiment analysis
Topic modeling and keyword extraction
Activity pattern detection


AI Integration (ai_integration.py)

Optional AI enhancement with multiple providers
OpenAI GPT integration
HuggingFace models support
Local fallback processing
Relational insight generation


EventBrite Integration (eventbrite_service.py)

Real-time event search
Location-based filtering (50-mile radius)
Time-based filtering (next 12 hours)
Relevance scoring based on interests
Multi-category search


Interactive Mapping (map_service.py)

OpenStreetMap integration with Folium
Event clustering for performance
Heatmap visualization
Custom markers by category
Export capabilities (GeoJSON, KML)


Performance & Caching (cache_service.py)

Redis support with disk fallback
Session management
Rate limiting
Result caching


Web Application (app.py)

Flask-based with modern UI
Async processing for long operations
Real-time progress updates
Export functionality (JSON, CSV, iCal)
Privacy-focused design



Key Architectural Decisions:

Modular Design: Each component is independent and can be tested/updated separately
Async Processing: Long-running searches don't block the UI
Graceful Degradation: Works without optional services (Redis, AI)
Privacy First: Minimal data collection, temporary storage only
Extensibility: Easy to add new scrapers, AI providers, or event sources

Security Features:

CSRF protection
Rate limiting
Input validation
Secure session management
No permanent user data storage
